
tiny.c는 서버 목적이므로 아까 봤던 echoS (echo Server 코드와 유사함)
연결 확인이 주된 내용이었던 echo와 달리 기능이 확장되고, 또 컨텐츠 내용에 따라 분기점까지 만들어짐!!





# 필요한 라이브러리 불러오기

선언부









메인(매개변수 갯수와 내용)
{
    사전 변수 선언 부





    if (매개변수 갯수가 충족되지 않으면)
    {
        매개변수 적는법을 알려준다.
        프로그램을 종료한다.
    }


    클라이언트를 받기 위한 디스크럽터 생성을 시도한다. 포트번호가 필요하다.

    아래 내용을 무한 반복하기
    {

        클라이언트 신상정보를 위한 공간을 초기화한다.

        connfd에 연결을 수락하는 함수의 결과값을 배정한다. 이게 실제로 사용할 디스크럽터가 된다. 여기도 리턴값이 세 개이다.
        바로 윗줄에서 얻은 클라이언트에 대한 정보를 통해 보다 사람이 읽을 수 있는 형태로 내용을 받아온다.
        클라이언트 아무개씨와 00000번으로 연결되었읍니다. 라고 출력한다.
        doit 이라는 서버의 할 일을 연결된 클라이언트를 위해 수행한다.
        그 이후 디스크럽터를 사용을 명시적으로 끝낸다.
    }
}



doit(이 함수의 결과를 받을 사람을 매개변수로 쓴다)
{

    사전 변수 선언



    사전 변수 선언 끝


    안전 중개 장치에 디스크럽터 직접 연결
    중개 장치로부터 내용을 읽어온다.
        단순 출력
        단순 출력
    요청 라인을 읽어와서 파싱한다. 서버에게 뭘 원하는지, 아무개의 접속 상황 등을 받아온다.



    만약 GET이 아니면
    {

        GET 말고 다른건 아직 안됩니다! 라고 출력하고 함수를 즉시 종료한다.
    }

    header를 읽는 함수를 작동시키지만 여기선 아무것도 안한다. 설명 안할 것임




    아까 아무개에게서 받아온 정보 중 uri에도 얘가 뭘 원하는지를 알 수 있다. 정적 컨텐츠를 필요로 하는지 동적 컨텐츠를 필요로 하는지를 확인한다.


    만약 : 그런 파일이 없다면
    {
        그런 파일 없다고 출력하고, 이 함수를 즉시 끝낸다.
    }


    만약 : 아무개가 원하는 것이 정적 컨텐츠라면
    {

        만약 (일반 파일이 아니다. 또는 읽을 수 있는 권한이 아니다.)
        {
            나는 이런거 못 읽습니다. 출력하고, 이 함수를 즉시 끝낸다.
        } 
        정적 컨텐츠를 대접하는 함수를 실행한다. || serve_static
    }
    그렇지 않다면 # 동적 컨텐츠를 원하는 것
    {
        만약 (실행 할 수 없다. 또는 읽을 수 있는 권한이 아니다.)
        {
            나는 이런거 못해요. 출력하고, 이 함수를 즉시 끝낸다.
        }
        동적 컨텐츠를 대접하는 함수를 실행한다.
    }
}


로그까진 아니더라도 무슨무슨 문제가 있습니다 라는 페이지를 띄우는 함수
{
    딱히 설명할 정돈 아님

















}

void read_requesthdrs()
{
    여기선 논하지 않음
}


# parse_uri
아무개가 뭘 원하는지 정확하게 정하는 함수(주문서, filename, cgiargs)
{
    uri에 cgi-bin이 있으면 동적이고 없으면 정적이다. 

    정적 컨텐츠 요구인경우
    {
        cgiargs에는 아무것도 안한다.
        filename에 uri 내용을 붙여준다.

        filename에 home.html을 하드코딩으로 박는다.
    }

    동적 컨텐츠 요구인경우
    {
        cgiargs에 uri 내용의 상세 내용을 붙여준다.
        filename에 uri 내용을 붙여준다.
    }
}

정적 컨텐츠 제공 함수(누구에게, 뭘, 얼마나 큰데)
{
    뭘 받을지를 확실히 하기 위해 get_filetype 호출한다.

    클라이언트에게 이런걸 한다!! 라고 로그아닌 로그를 보낸다.


    filename에 해당하는 내용을 읽기 전용으로 열면서 파일 디스크럽터를 하나 쓴다.
    이 파일을 가상 메모리 영역에 올린다.
    파일은 올렸으니 더 이상 디스크럽터 쓸 일이 없으니 사용종료 한다.


    안전 중개 장치를 써서 가상 메모리 영역에 있는 파일 내용이 클라이언트를 향해 복사되도록 한다.

    해당 메모리를 쓸 일이 더 없으니 해제한다.
}

파일 타입을 정하는 함수(파일 이름, 파일 타입)
{
    파일 이름이 뭘로 끝나냐에 따라 파일 타입 내용에 추가된다. 별거 없음
}

동적 컨텐츠 제공 함수(누구에게, 뭘, 얼마나 큰데)
{
    ㅈㅅ 여긴 잘 모르겟어요.
}

