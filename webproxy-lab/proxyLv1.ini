필수 라이브러리 불러오기

최대 캐시 사이즈 정의 : 이후 Step 3에서 필요
최대 Object 사이즈 정의 : 이후 Step 3에서 필요

접속 환경에 대한 정보를 하드 코딩으로 정의
ex, 맥OS + Chrome 실행시
//  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36
이런식의 형식을 말함

함수 정의 부

메인(매개변수 갯수, 내용)
{
    매개변수 갯수가 1개보다 적으면 : 매개변수 필요하다고 안내 후 프로그램 종료

    리슨 파일 디스크립터 변수에 포트를 재료로 리슨 디스크립터 배정하기

    무한루프
    {
        클라이언트 정보 저장을 위한 소켓 구조체 초기화
        connfd에 리슨 디스크립터를 통한 최종 접속이 될 클라이언트와의 디스크립터 배정하기
        Getnameinfo 호출
        [실제 할 일 실행]
        connfd 닫기
    }
}

[실제 할 일] | 매개변수로 connfd 필요
{
    Rio를 통한 통신을 통해 내용을 저장 할 문자열 공간을 여러 개 생성해야한다.
    주고 받는데에 쓸 통로 buf, 1개
    프록시와 연결된 클라이언트에게서 받아 올 정보 method, uri, version, 3개
    요청 내용을 담을 헤더, 1개
    총 다섯 개의 MAXLINE 길이를 가지는 char를 선언 하여 준비

    서버와 연결 할 디스크립터 배정 필요, 서버의 정보인 IP, 포트 2개로 Open_clientfd 시작
    서버와의 교신을 위한 Rio 버퍼 초기화
    클라이언트와의 교신을 위한 Rio 버퍼 초기화

    클라이언트에게서 요청문 받아오기, buf에 MAXLINE만큼 긁어오기
    sscanf 함수를 사용해서 buf 내용을 method, uri, version 3부분으로 나눠 담기

    sprintf (또는 다른 문자열 추가 함수를 사용) 해서 요청을 할 하나의 통짜 헤더 만들기
    예시 
    sprintf(newHeader, "%s %s HTTP/1.0\r\n", method, uri);
    sprintf(newHeader, "%sHost: localhost\r\n", newHeader);
    sprintf(newHeader, "%sServer: Tiny Web Server\r\n", newHeader);
    sprintf(newHeader, "%sUser-Agent: %s",newHeader, user_agent_hdr);
    sprintf(newHeader, "%sConnection: close\r\n", newHeader);
    sprintf(newHeader, "%sProxy-Connection: close\r\n\r\n", newHeader);

    sprintf는 입력 본 내용 전 왼쪽에 char 하나를 받는데, 오른쪽의 내용이 처리 된후 해당 char에 다시 저장됨, 대신 이전의 내용은 지워짐
    즉, 세번째 sprintf인 sprintf(newHeader, "%sServer: Tiny Web Server\r\n", newHeader); 를 보면 :
        이전 내용은
        method, uri, HTTP/1.0\r\n
        Host: localhost\r\n 을 %s에 newHeader를 불러옴으로써 다시 불러옴
        그리고 덧붙여 Server: Tiny Web Server\r\n까지 붙여주고, newHeader에 다시 저장함.
        += 형식이 아니라 매번 새로 배정하는 것은 기존의 내용이 사라지기 때문이다.
        그래서 오른쪽 newHeader가 먼저 사용되는 것을 이용해 우선 기존 내용을 뽑아내고 새로 저장하는 것이다.

    Rio_writen(어디로, 뭘, 뭘의 길이) 로 서버에 Header 정보를 전송하기

    전달받은거 그대로 전달해주기(클라이언트 디스크립터, 서버 Rio);
    서버 디스크립터 Close
}

전달받은거 그대로 전달해주기(클라이언트 디스크립터, 서버_Rio)
{
    오고가는 내용을 저장할 버퍼를 MAXLINE으로 정의
    함수의 정상 작동 여부를 저장할 ssize_t 타입의 변수 정의

    반복하기 : Rio_readlineb(어디서, 긁어온거 어디에 저장?, 얼마만큼 긁어옴?)의 결과 크기가 0보다 크면
    {
        그 결과만큼 Rio_writen을 이용해 클라이언트에 전송하기
        만약 : 긁어온 내용에 "\r\n"이 있다면
            이건 받아온 헤더 내용이니 필요없음. 반복문 즉시 종료
    }

    반복하기 : Rio_readnb(어디서, 긁어온거 어디에 저장? 얼마만큼 긁어옴?)의 결과 크기가 0보다 크면
    {
        그 결과 크기만큼 클라이언트에 전송하기
    }
}

제일 기초적인 구현 가능
단순 작동 확인을 위해서는 tiny에서 포트 22222로 연다고 하면 proxy에서 서버 연결시에도 포트를 동일하게 22222로 지정해야합니다..!!
채점 프로그램은 포트를 박아두면 0점으로 때리니 주의..!! 채점 하려면 헤더 관련해서 더 많이 써 내려가야합니다.